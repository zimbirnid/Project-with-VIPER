//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import XCTest
import Swinject
@testable import {{ module_info.project_name }}

class {{ module_info.name }}ModuleAssemblyTests: XCTestCase {

    override func setUp() {
        super.setUp()
        let assembly = {{ module_info.name }}AssemblyMock()
	assembly.assemble(container: Container())
    }

    override func tearDown() {
        super.tearDown()
    }

    func testConfigureModuleForViewController() {

        let viewController = {{ module_info.name }}ViewControllerMock()
        let configurator = {{ module_info.name }}Assembly()

        //then
        XCTAssertNotNil(viewController.output, "{{ module_info.name }}ViewController is nil after configuration")
        XCTAssertTrue(viewController.output is {{ module_info.name }}Presenter, "output is not {{ module_info.name }}Presenter")

        let presenter = {{ module_info.name }}Presenter()
        XCTAssertNotNil(presenter.view, "view in {{ module_info.name }}Presenter is nil after configuration")
        XCTAssertNotNil(presenter.router, "router in {{ module_info.name }}Presenter is nil after configuration")
        XCTAssertTrue(presenter.router is {{ module_info.name }}Router, "router is not {{ module_info.name }}Router")

        let interactor = {{ module_info.name }}Interactor()
        XCTAssertNotNil(interactor.output, "output in {{ module_info.name }}Interactor is nil after configuration")
    }

    class {{ module_info.name }}AssemblyMock: {{ module_info.name }}Assembly {
	override func assemble(container: Container) {
            container.register({{ module_info.name }}Router.self) { (_, viewController: {{ module_info.name }}ViewController) in
                let router = {{ module_info.name }}Router()
                router.view = viewController
                return router
            }
            
            container.register({{ module_info.name }}Interactor.self) { (resolver, presenter: {{ module_info.name }}Presenter) in
                let interactor = {{ module_info.name }}Interactor(userDefaults: resolver.resolve(UserDefaultsService.self)!, network: resolver.resolve(NetworkService.self)!)
                interactor.output = presenter
                return interactor
            }
            
            container.register({{ module_info.name }}Presenter.self) { (resolver, viewController: {{ module_info.name }}ViewController) in
                let presenter = {{ module_info.name }}Presenter()
                presenter.view = viewController
                presenter.interactor = resolver.resolve({{ module_info.name }}Interactor.self, argument: presenter)
                presenter.router = resolver.resolve({{ module_info.name }}Router.self, argument: viewController)
                return presenter
            }
            
            container.storyboardInitCompleted({{ module_info.name }}ViewController.self) { resolver, viewController in
                viewController.output = resolver.resolve({{ module_info.name }}Presenter.self, argument: viewController)
            }
        }
    }
}
